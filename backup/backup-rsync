#!/bin/bash
# --------------------------------------------------------
# Script to backup server databases
#
# This script uses the following tools :
#  * rsync
#
#
# Parameters :
#  $1 - rsync backup description file
#  $2 - backup log
#
#  Revision history :
#   08/06/2013, V1.0 - Creation by N. Bernaerts
#   04/11/2013, V1.1 - Handle error cases & log
#   08/11/2013, V1.2 - Change parameters
#   15/10/2017, V1.3 - Merge configuration in single file
#   05/10/2019, V1.4 - Change log management
# --------------------------------------------------------

# retreive parameters
BACKUP_CONFIG="$1"
BACKUP_LOG="$2"

# temporary files
TMP_DIR=$(mktemp --tmpdir --directory backup-rsync-XXXXXX)
TMP_PASSWD="${TMP_DIR}/backup.pwd"
TMP_LOG="${TMP_DIR}/backup.log"
TMP_LIST="${TMP_DIR}/backup.lst"

# check if another identical backup session is running
NB_PROCESS=$(ps -C "backup-rsync" -o pid=,comm=,args= | grep "${BACKUP_CONFIG}" | wc -l)

# set backup parameters
BACKUP_NAME="$(cat ${BACKUP_CONFIG}   | grep "name="     | cut -d'=' -f2-)"
BACKUP_SERVER="$(cat ${BACKUP_CONFIG} | grep "server="   | cut -d'=' -f2-)"
BACKUP_PORT="$(cat ${BACKUP_CONFIG}   | grep "port="     | cut -d'=' -f2-)"
BACKUP_MODULE="$(cat ${BACKUP_CONFIG} | grep "module="   | cut -d'=' -f2-)"
BACKUP_USER="$(cat ${BACKUP_CONFIG}   | grep "user="     | cut -d'=' -f2-)"
BACKUP_PASSWD="$(cat ${BACKUP_CONFIG} | grep "password=" | cut -d'=' -f2-)"
BACKUP_OPTION="$(cat ${BACKUP_CONFIG} | grep "option="   | cut -d'=' -f2-)"

# log action
echo "-- Rsync ${BACKUP_NAME} --" | tee -a "${BACKUP_LOG}"

# if backup already running
if [ ${NB_PROCESS} -gt 2 ]
then
	# log error
	date +"error %H:%M Backup already running" | tee -a "${BACKUP_LOG}"

# else, run the backup
else
	# generate backup directories list
	grep "^dir=" "${BACKUP_CONFIG}" > "${TMP_LIST}"

	# create password file
	echo "${BACKUP_PASSWD}" > "${TMP_PASSWD}"
	chmod 0700 "${TMP_PASSWD}"

	# loop thru the backup list
	while read LINE
	do
		# keep line content
		CONTENT=$(echo "${LINE}" | cut -d'=' -f2-)

		# extract directory data
		DIRECTORY_LABEL=$(echo "${CONTENT}" | cut -d';' -f1)
		DIRECTORY_PATH=$(echo "${CONTENT}" | cut -d';' -f2)
		DIRECTORY_EXCLUDE=$(echo "${CONTENT}" | cut -d';' -f3)

		# if backup dir exists, start the backup
		if [ -d "$DIRECTORY_PATH" ]
		then
			# set options
			ARR_OPTION=( $(echo ${BACKUP_OPTION}) )
			[ "$DIRECTORY_EXCLUDE" != "" ] && ARR_OPTION=( "${ARR_OPTION[@]}" "--exclude=${DIRECTORY_EXCLUDE}" )

			# beginning of backup
			date +"start   %H:%M ${BACKUP_NAME} ${DIRECTORY_PATH}"

			# backup the directory structure
			rsync "${ARR_OPTION[@]}" "--password-file=${TMP_PASSWD}" "${DIRECTORY_PATH}" "rsync://${BACKUP_USER}@${BACKUP_SERVER}:${BACKUP_PORT}/${BACKUP_MODULE}" > "${TMP_LOG}"

			# log success or error
			NB_LINE=$(cat "${TMP_LOG}" | wc -l)
			[ ${NB_LINE} -gt 0 ] && RESULT="success" || RESULT="error"
			date +"${RESULT} %H:%M ${BACKUP_NAME} ${DIRECTORY_PATH}" | tee -a "${BACKUP_LOG}"

		# else, directory not present
		else
			# log error
			date +"error %H:%M ${BACKUP_NAME} ${DIRECTORY_PATH} absent" | tee -a "${BACKUP_LOG}"
		fi
	done < "${TMP_LIST}"
fi

# remove temporary files
rm -R "${TMP_DIR}"

